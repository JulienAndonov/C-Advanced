using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace ChallengeNewRelicV4
{
    class Program
    {
        public static void Main(string[] args)
        {
            ConcurrentDictionary<string, int> sequences = new ConcurrentDictionary<string, int>();
            string dir = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            var backgroundTasks = new List<Task>();
            try
            {
                if (args.Length > 0)
                {
                    foreach (var file in args)
                    {
                        string fullName = dir + System.IO.Path.DirectorySeparatorChar + file;
                        backgroundTasks.Add(ProcessStream(File.OpenText(fullName),sequences));
                        Task.WaitAll(backgroundTasks.ToArray());
                    }
                }
                else
                {
                    backgroundTasks.Add(ProcessStream(Console.In,sequences));
                    Task.WaitAll(backgroundTasks.ToArray());
                }
                foreach (var sequence in sequences.OrderByDescending(x => x.Value).Take(100))
                {
                    Console.WriteLine($"{sequence.Key} - {sequence.Value}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }

        private static async Task ProcessStream(TextReader str,ConcurrentDictionary<string,int> sequences)
        {
            string currentLine = string.Empty;
            List<string> currentLineList = new List<string>();
            Queue<string> currentSequenceQueue = new Queue<string>();

            while ((currentLine = await str.ReadLineAsync()) != null)
            {
                currentLineList = Regex.Replace(currentLine, @"[^A-Za-z0-9]+", " ")
                    .Split(" ", StringSplitOptions.RemoveEmptyEntries).ToList();
                foreach (var word in currentLineList)
                {
                    currentSequenceQueue.Enqueue(word);
                    if (currentSequenceQueue.Count < 3)
                    {
                        continue;
                    }
                    string currentSequence = String.Join(" ", currentSequenceQueue).ToLower();
                    if (!sequences.ContainsKey(currentSequence))
                    {
                        sequences[currentSequence] = 1;
                    }
                    else
                    {
                        sequences[currentSequence]++;
                    }
                    currentSequenceQueue.Dequeue();
                }
            }
        }
    }
}